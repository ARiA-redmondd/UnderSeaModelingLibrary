Stuff to do:

* Porting to Windows
  -- The netcdf package compiles, but errors in read_etopo and span_bathy.
     Automatic data type translation does not seem to be working.
     Line 82 in netcdf_bathy.cc altitude->get( this->_data, lat_num, lng_num ) ;
     Tries to read "int" data into "float" array.  Function returns false.
  -- Make compiles of Tests and NetCDF interface optional?
  
* Cleanup tasks
  -- Move eigenray_llyods to studies directory.  Runs slow.
  -- Move wave_element::on_edge and find_edges() to wavefront class.
  -- Find a way to pass generic USML vector instead of explicitly using
     explicit c_vector anywhere in the API.
  -- Update references to Reilly paper to reflect JCA reference.
  -- Ensure that that the proploss and eigenray tests still work if we revert
     to the wave_front::CLASSIC_RAY version of the model.
  -- Replace uBLAS loops with iterators wherever possible.
     http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?UBLAS_Matrix_Iterators
  -- Check malta_movie for unsmooth rays.
  -- doxygen
     o enum values not printed to documentation.
  -- Add better checks for bathymetry and SVP outside of the area of interest.
     Should seek the nearest neighbor in lat/long space.  Interpolation outside
     of depth range is still OK.

* Ideas for expansion
  -- Find a way to alias element_prod() using operator*().
  -- Include GRAB-like algorithm to automatically increase ray spacing
     near caustics, surface duct axis, SOFAR axis.
  -- Include GRAB-like algorith to double the number of Gaussian beams.
     For beams that are center both between the rays and on the rays themselves.
     Doubles the beam coverage with any additional ray calculations.
  -- Optimize data_grid.interpolate() such that it need not loop
     over matrix arguments.  Groundwork for later GPU implementation.
  -- Add newest ISO C99 and XSI elements of math.h to ublas library
     (such as cbrt). See http://en.wikipedia.org/wiki/Math.h for functions
     to be implemented.  Does this conflict with the -std=c++98 in Makefile?
  -- Investigate use of ViennaCL to implement GPU implementation.
     See http://viennacl.sourceforge.net/ for code and docs.
     o Need to balance slow operations for individual accesses with fast
       matrix operations.  
     o Several of the intermediate vars in wave_element could be GPU based.
       Because they are only used in matrix form.  Could be a serious benefit
       to wave_element::update(). Examples: _c2_r, _dc_c, _sin_theta, 
       _cot_theta, pos_gradient?, ndir_gradient?, sound_speed?, sound_gradient?.
     o The operations in ode_integ::ab3_pos() and ode_integ::ab3_ndir() 
       could also run very quickly iff the constants were also GPU scalars.
     o Would it make sense for GPU version of wvectors to be split into
       separate rho, theta, and phi components?
  -- Investigate interfaces to linear algebra libs such as LAPACK.
     How well with this work in concert with the ViennaCL?
  -- Investigate use of octave to execute the Matlab test scripts.

